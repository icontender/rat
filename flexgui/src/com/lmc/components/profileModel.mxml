<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:lmc="com.lmc.components.*" 
	width="100%" height="90%" creationComplete="init()" >

	  
	  
	  <mx:Script>
	  	<![CDATA[
	  		 import mx.events.PropertyChangeEvent;
	  		 import com.lmc.utils.cobblerObject;
       		 import mx.core.IFlexDisplayObject;
             import mx.controls.ComboBox;
        	 import mx.core.Application;
             import mx.controls.CheckBox;
       	     import mx.collections.ArrayCollection;
             import mx.events.FlexEvent;
             import mx.events.ListEvent;
             import com.lmc.events.*;
             import mx.managers.PopUpManager;
             import mx.controls.Alert;
             import com.lmc.utils.*;
             import com.lmc.components.*;
             import com.lmc.events.*;
             import mx.controls.*;
             import flash.events.*;
         
             import mx.collections.ArrayCollection;
             import mx.utils.ArrayUtil;
             
             
           [Bindable] public var dp:cobblerObject;
          
           public function set dataProvider(data:cobblerObject):void{
           		dp = data;
                //this.maingrid.dataProvider = dp.profileData;
           		dp.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, detectChange);
           		
           }
           
           	  
           public function init():void{	  
			  
           }
           private function detectChange(evt:PropertyChangeEvent):void{
           		
           		// need to make sure the search field is not blank
           		if (this.filterTxt.text != ""){
           			this.filtercontent();
           		}
           }
           
           
           private function doubleClickHandler(event:ListEvent):void {
				mx.controls.Alert.show("Column1 is: " + event.itemRenderer.data.name);
			}
		   private function gridInit(event:FlexEvent):void {
				event.currentTarget.itemRenderer.properties = {doubleClickEnabled:true};
			}
			private function filterColumn(item:Object):Boolean
			{
				var content:String = filterTxt.text
				// If we concatenate all the fields we want to search we can search them all at once
				var key:String = item.name + " " + item.arch + " " + item.user;
				
				// maybe convert all strings to lowercase first
				key = key.toLowerCase();
				content = content.toLowerCase();
				
				
				if(key.indexOf(content) != -1) 
					return true;
				
				else
					return false;
			}
	
			///if the textbox is empty, it then calls back all of the data. I actually use a 'reset' button to do this as well.

			private function filtercontent():void
			{
				if (filterTxt.text.length == 0)
				{
					dp.distroData.filterFunction = null
				}
				else
				{
					dp.distroData.filterFunction = filterColumn;
				}
				dp.distroData.refresh()
			}
			
			
	  	]]>
	  </mx:Script>
	         <mx:Label x="15" y="5" text="Search" width="86" fontSize="12" fontWeight="bold"/>
			<mx:TextInput id="filterTxt" width="238" toolTip="Search by Name"  x="76" y="3" change="filtercontent()" text=""/>
			<lmc:profileView width="95%" height="95%" liveScrolling="true" mouseEnabled="true"
	 			itemDoubleClick="doubleClickHandler(event);" initialize="gridInit(event);" dataProvider="{dp.profileData}"
	  			horizontalGridLines="true" creationComplete="init()" x="14.5" y="30" id="maingrid" />
				
			
			 
			
</mx:Canvas>
